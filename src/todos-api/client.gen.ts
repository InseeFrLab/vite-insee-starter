/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * todos
 * OpenAPI spec version: 2.0.9
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
    DataTag,
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    MutationFunction,
    QueryClient,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult
} from "@tanstack/react-query";

import { fetch } from "./axiosInstance";
export interface Todo {
    id: string;
    text: string;
    isDone: boolean;
}

export type PutTodoIdBody = {
    /** @minLength 1 */
    text?: string;
    isDone?: boolean;
};

export type PutTodoBody = {
    /** @minLength 1 */
    text: string;
};

export type PutTodo200 = {
    /** The id of the newly created todo item */
    id: string;
};

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const putTodoId = (
    id: string,
    putTodoIdBody: PutTodoIdBody,
    options?: SecondParameter<typeof fetch>
) => {
    return fetch<void>(
        {
            url: `/todo/${id}`,
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            data: putTodoIdBody
        },
        options
    );
};

export const getPutTodoIdMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putTodoId>>,
        TError,
        { id: string; data: PutTodoIdBody },
        TContext
    >;
    request?: SecondParameter<typeof fetch>;
}): UseMutationOptions<
    Awaited<ReturnType<typeof putTodoId>>,
    TError,
    { id: string; data: PutTodoIdBody },
    TContext
> => {
    const mutationKey = ["putTodoId"];
    const { mutation: mutationOptions, request: requestOptions } = options
        ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putTodoId>>,
        { id: string; data: PutTodoIdBody }
    > = props => {
        const { id, data } = props ?? {};

        return putTodoId(id, data, requestOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutTodoIdMutationResult = NonNullable<Awaited<ReturnType<typeof putTodoId>>>;
export type PutTodoIdMutationBody = PutTodoIdBody;
export type PutTodoIdMutationError = unknown;

export const usePutTodoId = <TError = unknown, TContext = unknown>(
    options?: {
        mutation?: UseMutationOptions<
            Awaited<ReturnType<typeof putTodoId>>,
            TError,
            { id: string; data: PutTodoIdBody },
            TContext
        >;
        request?: SecondParameter<typeof fetch>;
    },
    queryClient?: QueryClient
): UseMutationResult<
    Awaited<ReturnType<typeof putTodoId>>,
    TError,
    { id: string; data: PutTodoIdBody },
    TContext
> => {
    const mutationOptions = getPutTodoIdMutationOptions(options);

    return useMutation(mutationOptions, queryClient);
};

export const deleteTodoId = (id: string, options?: SecondParameter<typeof fetch>) => {
    return fetch<void>({ url: `/todo/${id}`, method: "DELETE" }, options);
};

export const getDeleteTodoIdMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteTodoId>>,
        TError,
        { id: string },
        TContext
    >;
    request?: SecondParameter<typeof fetch>;
}): UseMutationOptions<Awaited<ReturnType<typeof deleteTodoId>>, TError, { id: string }, TContext> => {
    const mutationKey = ["deleteTodoId"];
    const { mutation: mutationOptions, request: requestOptions } = options
        ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof deleteTodoId>>,
        { id: string }
    > = props => {
        const { id } = props ?? {};

        return deleteTodoId(id, requestOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type DeleteTodoIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTodoId>>>;

export type DeleteTodoIdMutationError = unknown;

export const useDeleteTodoId = <TError = unknown, TContext = unknown>(
    options?: {
        mutation?: UseMutationOptions<
            Awaited<ReturnType<typeof deleteTodoId>>,
            TError,
            { id: string },
            TContext
        >;
        request?: SecondParameter<typeof fetch>;
    },
    queryClient?: QueryClient
): UseMutationResult<Awaited<ReturnType<typeof deleteTodoId>>, TError, { id: string }, TContext> => {
    const mutationOptions = getDeleteTodoIdMutationOptions(options);

    return useMutation(mutationOptions, queryClient);
};

export const putTodo = (putTodoBody: PutTodoBody, options?: SecondParameter<typeof fetch>) => {
    return fetch<PutTodo200>(
        {
            url: `/todo`,
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            data: putTodoBody
        },
        options
    );
};

export const getPutTodoMutationOptions = <TError = unknown, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof putTodo>>,
        TError,
        { data: PutTodoBody },
        TContext
    >;
    request?: SecondParameter<typeof fetch>;
}): UseMutationOptions<Awaited<ReturnType<typeof putTodo>>, TError, { data: PutTodoBody }, TContext> => {
    const mutationKey = ["putTodo"];
    const { mutation: mutationOptions, request: requestOptions } = options
        ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
            ? options
            : { ...options, mutation: { ...options.mutation, mutationKey } }
        : { mutation: { mutationKey }, request: undefined };

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof putTodo>>,
        { data: PutTodoBody }
    > = props => {
        const { data } = props ?? {};

        return putTodo(data, requestOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PutTodoMutationResult = NonNullable<Awaited<ReturnType<typeof putTodo>>>;
export type PutTodoMutationBody = PutTodoBody;
export type PutTodoMutationError = unknown;

export const usePutTodo = <TError = unknown, TContext = unknown>(
    options?: {
        mutation?: UseMutationOptions<
            Awaited<ReturnType<typeof putTodo>>,
            TError,
            { data: PutTodoBody },
            TContext
        >;
        request?: SecondParameter<typeof fetch>;
    },
    queryClient?: QueryClient
): UseMutationResult<Awaited<ReturnType<typeof putTodo>>, TError, { data: PutTodoBody }, TContext> => {
    const mutationOptions = getPutTodoMutationOptions(options);

    return useMutation(mutationOptions, queryClient);
};

export const getTodos = (options?: SecondParameter<typeof fetch>, signal?: AbortSignal) => {
    return fetch<Todo[]>({ url: `/todos`, method: "GET", signal }, options);
};

export const getGetTodosQueryKey = () => {
    return [`/todos`] as const;
};

export const getGetTodosQueryOptions = <
    TData = Awaited<ReturnType<typeof getTodos>>,
    TError = unknown
>(options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>>;
    request?: SecondParameter<typeof fetch>;
}) => {
    const { query: queryOptions, request: requestOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetTodosQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodos>>> = ({ signal }) =>
        getTodos(requestOptions, signal);

    return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getTodos>>,
        TError,
        TData
    > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTodosQueryResult = NonNullable<Awaited<ReturnType<typeof getTodos>>>;
export type GetTodosQueryError = unknown;

export function useGetTodos<TData = Awaited<ReturnType<typeof getTodos>>, TError = unknown>(
    options: {
        query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>> &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getTodos>>,
                    TError,
                    Awaited<ReturnType<typeof getTodos>>
                >,
                "initialData"
            >;
        request?: SecondParameter<typeof fetch>;
    },
    queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetTodos<TData = Awaited<ReturnType<typeof getTodos>>, TError = unknown>(
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>> &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getTodos>>,
                    TError,
                    Awaited<ReturnType<typeof getTodos>>
                >,
                "initialData"
            >;
        request?: SecondParameter<typeof fetch>;
    },
    queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetTodos<TData = Awaited<ReturnType<typeof getTodos>>, TError = unknown>(
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>>;
        request?: SecondParameter<typeof fetch>;
    },
    queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetTodos<TData = Awaited<ReturnType<typeof getTodos>>, TError = unknown>(
    options?: {
        query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>>;
        request?: SecondParameter<typeof fetch>;
    },
    queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
    const queryOptions = getGetTodosQueryOptions(options);

    const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
        queryKey: DataTag<QueryKey, TData, TError>;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}
